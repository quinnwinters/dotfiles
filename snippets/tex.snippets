###################################################################################################
###    Python code to allow for context switching and smarter snippets 				### 
###    ------------------------------------------------------------------------- 		###
###      Snippets in this file can be marked with different contexts which allow them to be     ###
###      used only in specific cases. The Python code relies on being able to call vimtex       ###
###      functions. 										### 
### 												###
###      For example a snippet defined as: 							###
### 												###
###          context "math()" 									###
###          snippet -> "Arrow for convergence" iA 						###
###          \rightarrow 									###
###          endsnippet 									###
### 												###
###      will properly expand if in a math environment e.g. $to$ will become $\rightarrow$      ###
###      but will not expand if used in the context of regular paragraph text. 			###
### 												###
###      For more information, see the blog post by Giles Castel: 				### 
### 		https://castel.dev/post/lecture-notes-1/ 					###
###################################################################################################

global !p
import re

###################################################################################################
### 	PYTHON: Different contexts for snippets so they only sometimes auto expand 		###
###################################################################################################
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def not_math():
    return not math()
def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and y != '0'

# Annoyingly chracters like \t get matched to tab through their python regex lib
# so for any python string group we have to clean them up so that you can still
# capture common LaTeX phrases like \to 
def clean(match_group):
    return match_group.replace("\t", "\\t")\
    	.replace("\f", "\\f")\
    .replace("\n", "\\n")\
    .replace("\r", "\\r")\
    .replace("\b", "\\b")
endglobal

context "not_math()"
snippet mm "Inline math mode" wA
\$\displaystyle $1 \$$0
endsnippet 

context "not_math()"
snippet dm "Display math mode" wA
\[
    $0
\]
endsnippet

context "math()"
snippet tx "Text environment" wA
\text{$1}$0
endsnippet

context "math()"
snippet tbf "Bold text environment" wA
\textbf{$1}$0
endsnippet

context "math()"
snippet tit "Italic text environment" wA
\textit{$1}$0
endsnippet

snippet begin "Begin / end advanced environment" bA
\begin{$1}
$0
\end{$1}
endsnippet

context "not_math()"
snippet table "Table environment" bA
\begin{table}[h]
    \centering
    \caption{$1}
    \label{table:$2}
    \begin{tabular}{${3:c}}
        $0${4/((?<=.)c|l|r)|./(?1: & )/g}
    \end{tabular}
\end{table}
endsnippet

context "not_math()"
snippet figure "Figure environment" bA
\begin{figure}[h]
    \centering
    \includegraphics[width=0.8\columnwidth]{$1.pdf_tex}
    \caption{$2}
    \label{fig:$1}
\end{figure}
$0
endsnippet


context "not_math()"
snippet %StandardHeader "Standard latex document imports and settings" bA
% Generic package imports
\usepackage[english]{babel}
\usepackage[utf8]{inputenc}

% Setting up variables and author information (in case you want to easily reference
% these variables in other parts of hte text)
\newcommand{\thetitle}{Title}
\newcommand{\theauthor}{Author}

\title{\thetitle}
\author{\theauthor \thanks{Any additional information}}
\date{\today}

% Package imports for standard operations
\usepackage{enumitem}
\usepackage{amssymb}
\usepackage{amsmath}

% Standard equation numbering system
\numberwithin{equation}{section}

% Package imports for nicer fonts
\usepackage{bbm}    	% allow for indicator functions with \mathbbm{1}
\usepackage{esint}   	% nicer versions of the  integral fonts
\usepackage{eucal}  	% nicer versions of \mathcal{A-Z} letters
\usepackage{xcolor} 	% for fonts and packages that rely on color
endsnippet


context "not_math()"
snippet %SfBodytext "Use sans-serif text by default" bA
\renewcommand{\familydefault}{\sfdefault}
endsnippet

context "not_math()"
snippet %SfEverywhere "Use sans-serif text everywhere by default (including math)" bA
\usepackage{cmbright}
endsnippet
