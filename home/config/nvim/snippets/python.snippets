# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

###################################################################################################
### 	Python generic import and class snippets 						###
###################################################################################################

snippet #imp "import ..." bA
import $0
endsnippet

snippet #from "From ... import ..." bA
from $1 import $0
endsnippet

snippet #! "#!/usr/bin/env python3" bA
#!/usr/bin/env python3
$0
endsnippet

snippet #py2 "#!/usr/bin/env python" bA
#!/usr/bin/env python
$0
endsnippet

snippet #enc "coding=utf-8" bA
# coding=utf-8
$0
endsnippet

snippet #header "Default python header and imports" bA
# coding=utf-8
import typing
import logging
$1

log = logging.getLogger(__name__)

$0
endsnippet

snippet #script "Default script header and imports" bA
#!/usr/bin/env python3
# coding=utf-8
# PYTHON_ARGCOMPLETE_OK

import sys
import os
import argparse
import argcomplete
import typing
import logging
$1

# Arugment Setup
log = logging.getLogger(__name__)
parser = argparse.ArgumentParser(
    prog="$3"
    description="""
    $4
    """,
    epilog="""
    $5
    """
)

$4

argcomplete.autocomplete(parser)

# Script content
$0

def main(args):
    pass

args = parser_parse(args)
if __name__ == "__main__":
	log.debug("Running script with arguments", args)
	main(args)
endsnippet


snippet #class "class" bA
class $1(${2:object}):
    """
    $3
    """

    def __init__(self, ${4:args}):
        """
	$5
	Arguments:
	    $4
	"""
	${6:super().__init__()}
	${7:self._args=args}
	$0
endsnippet

snippet #method "class method" bA
def $1(
    self,
    ${2:args}
    ) -> ${3:None}:
    """
    $4
    Arguments:
        $2
    Returns:
        $3
    """
    ${5:pass}
endsnippet

snippet #func "function" bA
def $1(
    ${2:args}
    ) -> ${3:None}:
    """
    $4
    Arguments:
        $2
    Returns:
        $3
    """
    ${5:pass}
endsnippet

snippet #afunc "async function" bA
async def $1(
    ${2:args}
    ) -> ${3:None}:
    """
    $4
    Arguments:
        $2
    Returns:
        $3
    """
    ${5:pass}
endsnippet

snippet #amethod "async class method" bA
async def $1(
    self,
    ${2:args}
    ) -> ${3:None}:
    """
    $4
    Arguments:
        $2
    Returns:
        $3
    """
    ${5:pass}
endsnippet

snippet #immutable "property decorated function" bA
@property
def $1(self) -> ${2:str}:
    """
    PROPERTY: $3
    """
    ${4:return self._$1}
endsnippet

snippet #prop "property decorated function" bA
@property
def $1(self) -> ${2:str}:
    """
    PROPERTY: $1
    """
    return self._$1

@$1.setter
def set_$1(self, value: $2) -> None:
    """
    SET PROPERTY $1
    Arguments:
    	value ($2) - new value
    Returns: None
    """
    self._$1 = value
endsnippet


snippet #continer "container like interface" bA
def __len__(self):
	${1:pass}

def __getitem__(self, key: ${2:str}) -> ${3:None}:
	${4:pass}

def __setitem__(self, key: $2, value: $3) -> ${5:None}:
	${6:pass}

def __delitem__(self, key: $2) -> ${7:None}:
	${8:pass}

def __iter__(self) -> ${9:typing.Generator[$3]}:
	${9:pass}

def __reversed__(self) -> ${9:typing.Generator[$3]}:
	${10:pass}

def __contains__(self, item: $3) -> ${11:bool}:
	${12:pass}
$0
endsnippet

snippet #context "context like interface" bA
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet

snippet #attr "attribute like interface" bA
def __getattr__(self, name: ${1:str}) -> ${2:None}:
	${3:pass}

def __setattr__(self, name: $1, value: $2) -> ${4:None}:
	${5:pass}

def __delattr__(self, name: $1) -> ${5:None}:
	${6:pass}
endsnippet

snippet #comparable "comparable like interface" bA
def __eq__(self, other) -> bool:
	${1:pass}

def __ne__(self, other) -> bool:
	${2:pass}

def __lt__(self, other) -> bool:
	${3:pass}

def __le__(self, other) -> bool:
	${4:pass}

def __gt__(self, other) -> bool:
	${5:pass}

def __ge__(self, other) -> bool:
	${6:pass}

def __cmp__(self, other) -> bool:
	${7:pass}
endsnippet

###################################################################################################
### 	Python logic blocks (including if/while/for/try etc.) 					###
###################################################################################################

snippet if "if block" bA
if$1:
    ${2:pass}
$0
endsnippet

snippet else "if/else block" bA
else:
    ${1:pass}
$0
endsnippet

snippet elif "elif block" bA
elif$1:
    ${2:pass}
$0
endsnippet

snippet for "for loop" bA
for${1:value} in ${2:values}:
    ${3:pass}
$0
endsnippet

snippet while "while loop" bA
while${1:value is not None}:
    ${2:pass}
$0
endsnippet

snippet try "try / except block" bA
try:
    $1
except ${2:Exception} as err:
    ${3:log.error("Processing error due to ", err)}
$0
endsnippet

###################################################################################################
### 	Python cli snippets for commonly used functions and arguments 				###
###################################################################################################

snippet #argparser "argument parser" bA
parser = argparse.ArugmentParser()
endsnippet

snippet #argument "argparse argument" bA
parser.add_argument(
    "$1",
    help="""
        $2
    """,
    type=${3:str}
)
$0
endsnippet

snippet #autocomplete "argcomplete bash completion"
argcomplete.autocomplete(parser)
endsnippet
