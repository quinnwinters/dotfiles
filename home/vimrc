"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM PYTHON SETUP                                                              """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable Python3 through virtual environment, but disable perl+python2
let g:python3_host_prog = '/opt/anaconda3/envs/neovim/bin/python'
let g:loaded_perl_provider = 0
let g:loaded_python_provider = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM PLUGIN SETUP                                                              """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call plug#begin('~/.vim/plugged')

" Appearence Plugins 
Plug 'nathanaelkane/vim-indent-guides'        
Plug 'altercation/vim-colors-solarized'        
Plug 'rrethy/vim-illuminate'

" Git functionality
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'                       
Plug 'rhysd/git-messenger.vim'

" Language and syntax highlighting and compleition
Plug 'dense-analysis/ale'                       
Plug 'neoclide/coc.nvim', {'branch': 'release'} 

" Specific language and formatting functionality
Plug 'lervag/vimtex'
Plug 'iamcco/markdown-preview.nvim'
Plug 'vimwiki/vimwiki'
Plug 'freitass/todo.txt-vim'

" Navigation functionality 
Plug 'christoomey/vim-tmux-navigator'         
Plug 'kien/ctrlp.vim'                          

" Search functionality
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" Utility functions
Plug 'scrooloose/nerdcommenter'                 
Plug 'liuchengxu/vim-which-key'
Plug 'voldikss/vim-floaterm'
Plug 'metakirby5/codi.vim'

call plug#end()



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM PLUGIN SETUP - REMOTE DEFAULT MAPPINGS                                    """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:git_messenger_no_default_mappings=1
let g:gitgutter_map_keys = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          DISABLE EASY MODE NAVIGATION                                                  """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove newbie crutches in Command Mode
cnoremap <Down> <Nop>
cnoremap <Left> <Nop>
cnoremap <Right> <Nop>
cnoremap <Up> <Nop>

" Remove newbie crutches in Insert Mode
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>

" Remove newbie crutches in Normal Mode
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up> <Nop>

" Remove newbie crutches in Visual Mode
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Up> <Nop>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC VIM DISPLAY SETTINGS                                                    """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual editor settings
set relativenumber
set colorcolumn=100
set ruler
set nowrap
set signcolumn=yes
set cmdheight=2

" Basic vim settings
set nocompatible
syntax enable
filetype plugin on
set background=dark
colorscheme solarized

" Git gutter display settings
let g:gitgutter_sign_added = 'ad'
let g:gitgutter_sign_modified = 'md'
let g:gitgutter_sign_removed = 'rm'
let g:gitgutter_sign_removed_first_line = '^^'
let g:gitgutter_sign_removed_above_and_below = '{'
let g:gitgutter_sign_modified_removed = 'ww'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC ANNOYANCE SETTINGS                                                      """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable scrollbars
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

" Remove annoying alerts on error
set novisualbell
set noerrorbells

" Open your splits in the right places
set splitbelow
set splitright

" Share you clipboard properly 
set clipboard=unnamed


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC EDITING SETTINGS                                                        """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File modification setttings
set nobackup 
set nowritebackup
set noswapfile 
set autoread 
set updatetime=100
set encoding=utf8
set hidden 

" Search settings
set hlsearch 
set ignorecase 
set smartcase 
set incsearch 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          LEADER SHORTCUTS SETTINGS                                                     """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Set leader and local leader and use vim-which-key for nice auto-completion
let mapleader="\<Space>"
let maplocalleader=","

" Setup WhichKey 
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
"nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>
let g:which_key_map = {}
let g:which_key_sep = '-'

" leader keys starting with a => action commands 
let g:which_key_map.a = {}

map <leader>am :MarkdownPreview<CR>
map <leader>aM :MarkdownPreviewStop<CR>
map <leader>ar :Codi<CR>
map <leader>aR :Codi!<CR>
map <leader>ax <Plug>(vimtex-compile)

" leader keys starting with b => buffer commands
let g:which_key_map.b = {}

map <leader>bn :enew<CR>
map <leader>bo :enew<BAR>:Telescope find_files<CR>
map <leader>bO :vsplit<BAR>:Telescope find_files<CR>
map <leader>bf :enew<BAR>:Telescope live_grep<CR>
map <leader>bF :vsplit<BAR>:Telescope live_grep<CR>
map <leader>bl :Telescope buffers<CR> 
map <leader>bL :vsplit<BAR>:Telescope buffers<CR>
map <leader>bj :bnext<CR>
map <leader>bk :bprev<CR>

" leader keys starting with c => code 
let g:which_key_map.c = {}

map <leader>cc <Plug>(NERDCommenterToggle)
vmap <leader>cf <Plug>(coc-format-selected)
nmap <leader>cf <Plug>(coc-format-selected) 
nmap <leader>ca <Plug>(coc-codeaction)
nmap <leader>cx <Plug>(coc-fix-current)
nmap <leader>cr <Plug>(coc-rename)

" leader keys starting with g => git commands 
let g:which_key_map.g = {}

map <leader>ga <Plug>(GitGutterStageHunk)
map <leader>gu <Plug>(GitGutterUndoHunk)
map <leader>gA :Git add -u<CR>
map <leader>gc :Git commit<CR>
map <leader>gf :Git feat<cr>
map <leader>gx :Git fix<cr>
map <leader>gD :Gdiffsplit<CR>
map <leader>gl :Git pull<CR>
map <leader>gL :Git lg<CR>
map <leader>gp :Git push<CR>
map <leadeR>gP <Plug>(GitGutterPreviewHunk)
map <leader>gm <Plug>(git-messenger)
map <leader>gn <Plug>(GitGutterNextHunk)
map <leader>gN <Plug>(GitGutterPrevHunk)
map <leader>gG :Ggrep 
map <leader>gR :Gread
map <leader>gW :Gwrite
map <leader>gB :GBrowse<CR>

" leader keys starting with t => terminal commands
let g:which_key_map.t = {}

map <leader>tt :FloatermToggle
map <leader>tn :FloatermNew --wintype=normal --height=6
map <leader>tf :FloatermNew fzf
map <leader>tp :FloatermNew python3
map <leader>tn :FloatermNew node
map <leader>to :FloatermNew top

" leader keys starting with w => VimWiki commands
let g:which_key_map.w = {}

" map <leader>ww open default wiki index file 
" map <leader>wt open wiki index file in a new tab 
" map <leader>ws select and open wiki index file
" map <leader>wr rename the wiki file you are in
" map <leader>wi open diary index file for wiki 
" map <leader>w<leader>w open today's diary file
" map <leader>w<leader>t open today's diary file in a new tab

" leader keys starting with x => todo.txt commands
let g:which_key_map.x = {} 

nnoremap <leader>x@ :%call todo#txt#sort_by_context()<CR>
nnoremap <leader>x+ :%call todo#txt#sort_by_project()<CR>
nnoremap <leader>xs :%call todo#txt#sort_by_date()<CR>
nnoremap <leader>xS :%call todo#txt#sort_by_due_date()<CR>
map <leader>xa :call todo#txt#prioritize_add('A')<CR>
map <leader>xb :call todo#txt#prioritize_add('B')<CR>
map <leader>xc :call todo#txt#prioritize_add('C')<CR>
map <leader>xJ :call todo#txt#prioritize_increase()<CR>
map <leader>xK :call todo#txt#prioritize_decrease()<CR>
nnoremap <leader>xx :call todo#txt#mark_as_done()<CR>
vnoremap <leader>xX :call todo#txt#mark_as_done()<CR>
map <leader>xD :call todo#txt#remove_completed()<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC SHORTCUTS SETTINGS                                                      """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Esc shortcuts
inoremap jk <ESC>
inoremap kj <ESC>

" Use Ctrl+A/E in command mode like you would in shell
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" Some buffer opening commands to make things easier
map <C-o> :enew<BAR>:Telescope find_files<CR>
map <C-O> :vsplit<BAR>:Telescope find_files<CR>
map <C-n> :bnext<CR>
map <C-N> :bprev<CR>
map <C-s> :w<CR>
map <C-S> :wa<CR>
map <C-q> :wq<CR>
map <C-Q> :wqa!<CR>

" When selecting code in visual mode, move the code with shift+j/k
xnoremap K :move '<-2<CR>gv-gv
xnoremap J :move '>+1<CR>gv-gv


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          COC PLUGIN SETTINGS                                                           """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" COC Extensions
let g:coc_global_extensions = [
  \ 'coc-actions', 
  \ 'coc-floaterm',
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-json',
  \ 'coc-vimtex',
  \ 'coc-pyright',
  \ 'coc-clangd',
  \ 'coc-metals',
  \ 'coc-java',
  \ 'coc-java-debug',
  \ 'coc-sh',
  \ 'coc-yaml'
  \ ]

" When coc is not activating for some reason, use Ctrl+Spc to get it to trigger 
inoremap <silent><expr> <c-space> coc#refresh()

"Recommended setting to avoid |ins-coimpletion-menu|
set shortmess+=c

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<Tab>'

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""         CTRL-P AND BUFFER OPENING SETTINGS                                             """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ctrl-p should ignore certain types of files 
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""         CODE FORMATTING AND COMMENTING SETTINGS                                        """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Better NERDCommenter settings 
let g:NERDCreateDefaujltMappings = 1 
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitepsace=1
let g:NERDToggleCheckAllLines = 1

" Code format and folding
command! -nargs=0 Format :call CocAction("format")
command! -nargs=? Fold :call CocAction("fold", <f-args>)
command! -nargs=0 OR :call CocAction("runCommand", "editor.action.organizeImport")


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""         FLOATING TERMINAL SETTINGS                                                     """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:floaterm_title = "terminal-$1"
let g:floaterm_wintype = "split"
let g:floaterm_height = 15
let g:floaterm_position = 'belowright'
let g:floaterm_autoclose = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""         SIDE-REPL/TERMINAL SETTINGS                                                    """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:codi#virtual_text_prefix = "$ "


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM-WIKI CONFIGURATION SETTINGS                                               """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vimwiki_list = [ {'path': '~/Code/github.com/qwinters/personal-wiki/wiki', 'path_html': '~/Code/github.com/qwinters/personal-wiki/html', 'syntax': 'markdown', 'ext': 'md' } ]

