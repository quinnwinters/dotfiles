"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM RUNTIME AND PLUGIN SETUP                                                  """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vundle plugins
" Setup Vundle Plugins
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

" Enable Python3 through virtual environment, but disable perl+python2
let g:python3_host_prog = '/opt/homebrew/anaconda3/envs/neovim/bin/python'
let g:loaded_perl_provider = 0
let g:loaded_python_provider = 0

" Specify Vundle Plugins
call vundle#begin()

" Appearence plugins
Plugin 'nathanaelkane/vim-indent-guides'        " Tab/indent guidelines
Plugin 'vim-airline/vim-airline'                " Airline for status line
Plugin 'vim-airline/vim-airline-themes'         " Airline themes
Plugin 'dense-analysis/ale'                     " Linting errors in sign column
Plugin 'airblade/vim-gitgutter'                 " Git status in sign column
Plugin 'tpope/vim-fugitive'                     " Git actions
Plugin 'altercation/vim-colors-solarized'       " Enable solarized color scheme

" Utility functions plugins
Plugin 'junegunn/fzf'                           " fzf for file searching/opening
Plugin 'kien/ctrlp.vim'                         " CtrlP for searching files
Plugin 'preservim/nerdtree'                     " NERDTree for nice file navigation
Plugin 'editorconfig/editorconfig-vim'          " Unified syntax and editor config
Plugin 'christoomey/vim-tmux-navigator'         " Tmux/Vim unified navigation
Plugin 'scrooloose/nerdcommenter'               " Easy commenting / comment wrapping

" Language syntax and completition
Plugin 'ervandew/supertab'                      " Tab key multi-map
Plugin 'valloric/youcompleteme'                 " Code completition engine
Plugin 'SirVer/ultisnips'                       " Code snippet engine
Plugin 'scrooloose/syntastic'                   " Code syntax highlighting
Plugin 'chiel92/vim-autoformat'                 " Code autoformatting
Plugin 'sheerun/vim-polyglot'                   " Support for tons of languages

" Language specific plugins
Plugin 'lervag/vimtex'                          " Specific LaTeX support

call vundle#end()
filetype plugin indent on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC VIM SETTINGS                                                            """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual editor settings
set number " Always show line numbers
set showmatch " Always show bracket/paren matches
set colorcolumn=100 " Add a column at char=100 for visual indic of end of line
set ruler " Show position of cursor at all times
set nowrap " Do not wrap lines
set updatetime=100 " Update time
set signcolumn=yes " Column for diff relative to disk

" Disable scrollbars
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

" Remove annoying alerts on error
set novisualbell
set noerrorbells

" Whitespace / indentation settings
set autoindent " Copy indent from current line when making new line
set tabstop=4 " One tab = 4 spaces (specifically useful for python)
set shiftwidth=4 "One tab = 4 spaces
set softtabstop=-1 " Use same value as shiftwidth
set smarttab " Tab defaults to &shiftwidth
set expandtab " Auto exapnd tab to spaces

" File type specific plugins allowed
filetype plugin on
filetype indent on

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Enable syntax highlighting and dark solarized theme
syntax enable
set background=dark

" File modification settings
set nobackup " No backups (expected)
set noswapfile " No swapfiles (everything should be in git anyways)
set autoread " Automatically read changes made to disk
set encoding=utf8

" Search settings
set hlsearch " highlight search results
set ignorecase " ignore case when searching
set smartcase " ...unless query has capital letters
set incsearch " search incrementally forwards/backwards


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          LEADER SHORTCUTS                                                              """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim leader shortcuts
let mapleader=";"

" Basic naviation shortcuts
map <leader>; :vsplit<CR>
map <leader>\ :split<CR>
map <leader>o :Files<CR>
map <leader>t :tabnew
map <leader>/ :tabs<CR>

" Buffer and code formatting and completition shortcuts
map <leader>fm :Autoformat<CR>
map <leader>nt :NERDTreeToggle<CR>
" <leader>c<space> NERDCommenterToggle

" Git shortcuts
map <leader>go :Gread<CR>
map <leader>ga :Gwrite<CR>
map <leader>gc :Gcommit<CR>
map <leader>gs :Gstatus<CR>
map <leader>gl :Git pull<CR>
map <leader>gp :Git push<CR>
map <leader>lg :Glog -15 --reverse<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          CTRL-BASED SHORTCUTS                                                          """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic shortcuts
nnoremap <C-;> :vsplit<CR>
nnoremap <C-\> :split<CR>
nnoremap <C-o> :Files<CR>

" Tab navigations
nnoremap <C-/> :tabs<CR>
nnoremap <C-j> :tabnext<CR>
nnoremap <C-k> :tabprevious<CR>

" Change arrow movement to resize for splits
nnoremap <C-Up>    :resize +2<CR>
nnoremap <C-Down>  :resize -2<CR>
nnoremap <C-Left>  :vertical resize +2<CR>
nnoremap <C-Right> :vertical resize -2<CR>

" Shell settings
set wildmenu " tab-complition for command menu
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          PLUGIN SETTINGS                                                               """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim airline preferences
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_statusline_ontop=1

" Enable indent guidelines by default
let g:indent_guides_enable_on_vim_startup = 1

" Start with NERDTree open
autocmd VimEnter * NERDTree
autocmd BufEnter * NERDTreeMirror
autocmd VimEnter * wincmd w

" Tab completition for both YouCompleteMe and UltiSnips (using SuperTab)
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_python_interpreter_path = '/opt/homebrew/anaconda3/envs/neovim/bin/python'
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
