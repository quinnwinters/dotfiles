"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          VIM RUNTIME AND PLUGIN SETUP                                                  """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable Python3 through virtual environment, but disable perl+python2
let g:python3_host_prog = '/opt/anaconda3/envs/neovim/bin/python'
let g:loaded_perl_provider = 0
let g:loaded_python_provider = 0

" Specify Vundle Plugins
call plug#begin('~/.vim/plugged')

" Appearence plugins
Plug 'nathanaelkane/vim-indent-guides'          " Tab/indent guidelines
Plug 'vim-airline/vim-airline'                  " Airline for status line
Plug 'vim-airline/vim-airline-themes'           " Airline themes
Plug 'dense-analysis/ale'                       " Linting errors in sign column
Plug 'airblade/vim-gitgutter'                   " Git status in sign column
Plug 'tpope/vim-fugitive'                       " Git actions
Plug 'altercation/vim-colors-solarized'         " Enable solarized color scheme

" Utility functions plugin
Plug 'kien/ctrlp.vim'                           " CtrlP for searching files
Plug 'preservim/nerdtree'                       " NERDTree for nice file navigation
Plug 'christoomey/vim-tmux-navigator'           " Tmux/Vim unified navigation
Plug 'scrooloose/nerdcommenter'                 " Easy commenting / comment wrapping

" Language syntax and completition
Plug 'neoclide/coc.nvim', {'branch': 'release'} " COC Runs local language server

" Special Vim modes
Plug 'freitass/todo.txt-vim'                    " Todo-txt mode for vim
Plug 'vimwiki/vimwiki'                          " VimWiki for personal notes
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          BASIC VIM SETTINGS                                                            """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual editor settings
set number " Always show line numbers
set showmatch " Always show bracket/paren matches
set colorcolumn=100 " Add a column at char=100 for visual indic of end of line
set ruler " Show position of cursor at all times
set nowrap " Do not wrap lines
set updatetime=100 " Update time
set signcolumn=yes " Column for diff relative to disk

" Disable scrollbars
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=L

" Remove annoying alerts on error
set novisualbell
set noerrorbells

" Whitespace / indentation settings
set autoindent " Copy indent from current line when making new line
set tabstop=4 " One tab = 4 spaces (specifically useful for python)
set shiftwidth=4 "One tab = 4 spaces
set softtabstop=-1 " Use same value as shiftwidth
set smarttab " Tab defaults to &shiftwidth
set expandtab " Auto exapnd tab to spaces

" File type specific plugins allowed
filetype plugin on
filetype indent on

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Enable syntax highlighting and dark solarized theme
syntax enable
set background=dark
colorscheme solarized

" File modification settings
set nobackup " No backups (expected)
set noswapfile " No swapfiles (everything should be in git anyways)
set autoread " Automatically read changes made to disk
set encoding=utf8

" Search settings
set hlsearch " highlight search results
set ignorecase " ignore case when searching
set smartcase " ...unless query has capital letters
set incsearch " search incrementally forwards/backwards


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          LEADER SHORTCUTS                                                              """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Vim leader shortcuts
let mapleader=" "

" Basic naviation shortcuts
map <leader>; :vsplit<CR>
map <leader>\ :split<CR>
map <leader>/ :tabs<CR>
map <leader>f :CtrlP<CR>
map <leader>tn :tabnew
map <leader>tl :tabs<cr>
map <leader>j :tabnext<cr>
map <leader>k :tabprevious<cr>

" Buffer and code formatting and completition shortcuts
map <leader>fm :Autoformat<CR>
map <leader>nt :NERDTreeToggle<CR>
map <leader>wq :wqa!<CR>
map <leader>wa :wa!<CR>
map <leader>qq :q!<CR>
map <leader>qa :qa!<CR>

" Git shortcuts
map <leader>go :Gread<CR>
map <leader>ga :Gwrite<CR>
map <leader>gc :Gcommit<CR>
map <leader>gs :Gstatus<CR>
map <leader>gl :Git pull<CR>
map <leader>gp :Git push<CR>
map <leader>lg :Glog -15 --reverse<CR>
map <leader>gf :Git feat<CR>
map <leader>gx :Git fix<CR>
map <leader>gd :Git docs<CR>
map <leader>gy :Git style<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          CTRL-BASED SHORTCUTS                                                          """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Basic shortcuts
inoremap jk <ESC>

" Change arrow movement to resize for splits
nnoremap <C-Up>    :resize +2<CR>
nnoremap <C-Down>  :resize -2<CR>
nnoremap <C-Left>  :vertical resize +2<CR>
nnoremap <C-Right> :vertical resize -2<CR>

" Shell settings
set wildmenu " tab-complition for command menu
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          PLUGIN SETTINGS                                                               """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim airline preferences
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_statusline_ontop=1

" Enable indent guidelines by default
let g:indent_guides_enable_on_vim_startup = 1

" Tab completition for both YouCompleteMe and UltiSnips (using SuperTab)
" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_python_interpreter_path = '/opt/homebrew/anaconda3/envs/neovim/bin/python'
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
"let g:UltiSnipsExpandTrigger = "<tab>"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
"let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" make ctrlp ignore gitignore'd files
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""          COC CODE COMPLETE SETUP                                                       """""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-json',
  \ 'coc-vimtex',
  \ 'coc-pyright',
  \ 'coc-clangd',
  \ 'coc-julia',
  \ 'coc-metals',
  \ 'coc-tsserver',
  \ 'coc-java',
  \ 'coc-sh',
  \ 'coc-yaml'
  \ ]

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<Tab>'

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> df <Plug>(coc-definition)
nmap <silent> ty <Plug>(coc-type-definition)
nmap <silent> im <Plug>(coc-implementation)
nmap <silent> re <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

command! -nargs=0 Format :call CocAction('format')
command! -nargs=? Fold :call     CocAction('fold', <f-args>)
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
