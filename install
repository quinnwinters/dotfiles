#!/usr/bin/env sh

''':' # begin python string; this line is interpreted by the shell as `:`
command -v python  >/dev/null 2>&1 && exec python  "$0" "$@"
command -v python3 >/dev/null 2>&1 && exec python3 "$0" "$@"
command -v python2 >/dev/null 2>&1 && exec python2 "$0" "$@"
>&2 echo "Error: cannot find python"
exit 1
'''

# Python code for coordinating things

from argparse import ArgumentParser, RawTextHelpFormatter
from tempfile import NamedTemporaryFile
import subprocess
import shlex
import os
import sys

# profiles
MINIMAL = "minimal"
PERSONAL = "personal"
WORK = "work"
# end profiles

description = """
    Quinn's Dotbot-based Configuration script. 
        | Scripts are installed using the dotbot submodule, but the install.py script also coordinates 
        | certain meta-scripts (e.g. to setup trust with github, choose the appropriate configuration 
        | files, and setup optionals). Any additional arguments are passed to ./tooling/run-dotbot.sh
"""

dotbot_help = subprocess.check_output(
    "./tooling/dotbot/bin/dotbot --help", shell=True, universal_newlines=True)

epilog = """
    Additional arguments are passed to the dotbot API which uses the following args:
    ================================================================================
    """ + dotbot_help + """
    ================================================================================
    (note that the ./tooling/run-dotbot.sh script already uses 
        --base-directory
        --config-file
        --plugin
        --plugin-dir
    arguments, so you don't have to pass any of them)
"""

# arguments for script
parser = ArgumentParser(description=description, epilog=epilog, formatter_class=RawTextHelpFormatter)
parser.add_argument('--skip-dotbot', action='store_true', dest='skip_dotbot',
                    help='Set this flag to false to skip dotbot and just run meta-scripts')
parser.add_argument('--fresh', action='store_true', dest='fresh_install',
                    help='Use this flag for new installs to activate every optional script')
parser.add_argument("--xcode-select", action='store_true', dest='xcode_tools',
                    help="Use this flag to activate the script for installing xcode-select command tools")
parser.add_argument('--homebrew', action='store_true', dest='install_homebrew',
                    help="Use this flag to activate thes cript for installing homebrew MacOS package manager")
parser.add_argument('--github-ssh', action='store_true', dest='github_ssh',
                    help='Use this flag to activate the script for setting up Github ssh access')
parser.add_argument('--google-drive', action='store_true', dest='google_drive',
                    help='Use this flag to activate the script for setting up Google Drive local mount')
parser.add_argument('--profile', type=str, default=PERSONAL, dest="profile", choices=[MINIMAL, PERSONAL, WORK],
                    help="Use this flag to indicate the profile you want to use for install")
parser.add_argument("--include-aesthetics", action='store_true', dest='include_aesthetics',
                    help="Use this flag to include aesthetic preferences (wallpaper, dock arrangment) or reset them")
parser.add_argument("--restart", action='store_true', dest='restart_at_end',
                    help="Use this flag to force a restart at the end of the script (recommended for first runs)")
meta_args, dotbot_args = parser.parse_known_args()
# end arguments


print("""
   ____        _            _          ____        __  _____ __
  / __ \__  __(_)___  ____ ( )_____   / __ \____  / /_/ __(_) /__  _____
 / / / / / / / / __ \/ __ \|// ___/  / / / / __ \/ __/ /_/ / / _ \/ ___/
/ /_/ / /_/ / / / / / / / / (__  )  / /_/ / /_/ / /_/ __/ / /  __(__  )
\___\_\__,_/_/_/ /_/_/ /_/ /____/  /_____/\____/\__/_/ /_/_/\___/____/

================================================================================================
""")


def run(command_string):
    print("[DOTFILES] Running: $ {command_string}".format(
        command_string=command_string))
    subprocess.call(command_string, shell=True)


# special one-off scripts
if meta_args.fresh_install or meta_args.xcode_tools:
    run("./scripts/meta-setup/install-xcode-tools.sh")
if meta_args.fresh_install or meta_args.install_homebrew:
    run("./scripts/meta-setup/install-homebrew.sh")
if meta_args.fresh_install or meta_args.github_ssh:
    run("./scripts/meta-setup/setup-github-ssh.sh")
if meta_args.fresh_install or meta_args.google_drive:
    run("./scripts/meta-setup/setup-google-drive.sh")
# end one off scripts


# dotbot script call
if not meta_args.skip_dotbot:
    with NamedTemporaryFile(suffix="dotbot-config.yaml") as config_buffer:
        def include_config(config_location):
            print("[DOTFILES] Including configuration located at: {config_location}".format(
                config_location=config_location))
            with open(config_location, "r") as config:
                for line in config:
                    config_buffer.write(line)
                config_buffer.write("\n")

        include_config("./tooling/configuration/base.yaml")
        if meta_args.profile == MINIMAL:
            include_config("./tooling/configuration/minimal.yaml")
        elif meta_args.profile == PERSONAL:
            include_config("./tooling/configuration/personal.yaml")
        elif meta_args.profile == WORK:
            include_config("./tooling/configuration/work.yaml")
        else:
            profile_error = """
            [DOTFILES] Configuration profile: {profile} is not recognized.
            [DOTFILES] Supported profiles are: \{minimal, personal, work\}
            """.format(profile=meta_args.profile)

            raise ValueError(profile_error)
        config_buffer.flush()
        run("./tooling/run-dotbot.sh -c {name} ".format(
            name=config_buffer.name) + " ".join(dotbot_args))


if meta_args.include_aesthetics:
    run("./scripts/aesthetics/dock.sh")
    run("./scripts/aesthetics/wallpaper.sh")

if meta_args.restart_at_end:
    run("reboot")
